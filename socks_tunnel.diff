diff --git a/src/callbacks.c b/src/callbacks.c
index 1b6d3e7..aa893ef 100644
--- a/src/callbacks.c
+++ b/src/callbacks.c
@@ -88,6 +88,10 @@ void entry_changed_cb(GtkEntry *entry, gpointer data) {
     *((char **) data) = (char *) gtk_entry_get_text(entry);
 }
 
+void checkbox_changed_cb(GtkEntry *entry, gpointer data) {
+    *((int *) data) = gtk_toggle_button_get_active(entry);
+}
+
 void notebook_page_switched(GtkNotebook *notebook, GtkNotebookPage *page,
         guint page_num, gpointer user_data) {
     if(start_button) {
@@ -199,8 +203,13 @@ void start_button_clicked(GtkWidget *widget, gpointer data) {
             state->pid = fork();
         
             if(state->pid == 0) {
-                execlp(cmd, cmd, "-f", "--config",
-                    ".quicksynergy/synergy.conf", NULL);
+                if (state->req_tunnel) {
+                    execlp(cmd, cmd, "-f", "-a", "127.0.1.1", "--config",
+                        ".quicksynergy/synergy.conf", NULL);
+                } else {
+                    execlp(cmd, cmd, "-f", "--config",
+                        ".quicksynergy/synergy.conf", NULL);
+                }
             }
             
             g_free(cmd);
@@ -210,6 +219,7 @@ void start_button_clicked(GtkWidget *widget, gpointer data) {
             state->running = SYNERGY_SERVER_RUNNING;
         }
         else if(gtk_notebook_get_current_page(GTK_NOTEBOOK(notebook)) == 1) {
+            char *hostname;
             save_config(state);
             
             cmd = g_strjoin("/", state->synergy_path, "synergyc", NULL);
@@ -231,14 +241,31 @@ void start_button_clicked(GtkWidget *widget, gpointer data) {
                 return;
             }
 
+            if(state->use_socks) {
+                state->tunnel_pid = fork();
+                if(state->tunnel_pid == 0) {
+                    char *tunnel_spec;
+                    asprintf(&tunnel_spec, "localhost:24800:%s:24800",
+                             state->hostname);
+                    execlp("ssh", "ssh", "-N", "-L", tunnel_spec,
+                           state->hostname, NULL);
+                }
+            }
+
             state->pid = fork();
 
             if(state->pid == 0) {
+                if(state->use_socks && state->tunnel_pid != -1) {
+                    hostname = "localhost";
+                } else {
+                    hostname = state->hostname;
+                }
+
                 if(!strcmp(state->client_name, "")) {
-                    execlp(cmd, cmd, "-f", state->hostname, NULL);
+                    execlp(cmd, cmd, "-f", hostname, NULL);
                 } else {
                     execlp(cmd, cmd, "-f", "--name", state->client_name,
-                        state->hostname, NULL);
+                        hostname, NULL);
                 }
             }
             
@@ -251,14 +278,20 @@ void start_button_clicked(GtkWidget *widget, gpointer data) {
         gtk_widget_set_sensitive(notebook, FALSE);
     }
     else {
+        /* Prevent multiple entry */
+        state->running = 0;
+
         kill(state->pid, SIGTERM);
 
         wait(&status);
+
+        if(state->tunnel_pid > 0) {
+            kill(state->tunnel_pid, SIGTERM);
+            wait(&status);
+        }
         
         gtk_button_set_label(GTK_BUTTON(widget), GTK_STOCK_EXECUTE);
         gtk_widget_set_sensitive(notebook, TRUE);
-        
-        state->running = 0;
     }
 }
 
diff --git a/src/callbacks.h b/src/callbacks.h
index 32ff8c6..9cc17bb 100644
--- a/src/callbacks.h
+++ b/src/callbacks.h
@@ -30,6 +30,7 @@ enum synergy_mode {
 gboolean entry_focus_in_event(GtkWidget *widget, GdkEventFocus *event, gpointer data);
 gboolean entry_focus_out_event(GtkWidget *widget, GdkEventFocus *event, gpointer data);
 void entry_changed_cb(GtkEntry *entry, gpointer data);
+void checkbox_changed_cb(GtkEntry *entry, gpointer data);
 void notebook_page_switched(GtkNotebook *notebook, GtkNotebookPage *page, guint page_num, gpointer user_data);
 void about_button_clicked(GtkWidget *widget, gpointer data);
 void start_button_clicked(GtkWidget *widget, gpointer data);
diff --git a/src/main.c b/src/main.c
index 653fa93..1263059 100644
--- a/src/main.c
+++ b/src/main.c
@@ -20,6 +20,7 @@
 
 #include <stdlib.h>
 #include <sys/types.h>
+#include <signal.h>
 #include <gtk/gtk.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include "callbacks.h"
@@ -142,6 +143,13 @@ int main(int argc, char **argv) {
 
     /* display the main window */   
     gtk_widget_show_all(main_window);
+
+    /* Treat terminated children as stop button presses*/
+    void stop_on_sigchld(int num) {
+        if (state->running)
+            start_button_clicked(G_OBJECT(start_button), (gpointer) state);
+    }
+    signal(SIGCHLD, stop_on_sigchld);
     
     /* GTK mainloop */
     gtk_main();
diff --git a/src/synergy_config.c b/src/synergy_config.c
index 4703221..e1ac4c6 100644
--- a/src/synergy_config.c
+++ b/src/synergy_config.c
@@ -62,6 +62,11 @@ qs_state_t *load_config() {
          g_key_file_get_value(key_file, "Share", "Right", NULL) :
          _("Right"));
 
+    state->req_tunnel =
+        (g_key_file_has_key(key_file, "Require", "Tunnel", NULL) ?
+         g_key_file_get_value(key_file, "Require", "Tunnel", NULL) :
+         0);
+
     state->hostname =
         (g_key_file_has_key(key_file, "Use", "Hostname", NULL) ?
          g_key_file_get_value(key_file, "Use", "Hostname", NULL) :
@@ -72,6 +77,11 @@ qs_state_t *load_config() {
          g_key_file_get_value(key_file, "Use", "ClientName", NULL) :
          "");
 
+    state->use_socks =
+        (g_key_file_has_key(key_file, "Use", "SOCKS", NULL) ?
+         g_key_file_get_value(key_file, "Use", "SOCKS", NULL) :
+         0);
+
     state->synergy_path =
         (g_key_file_has_key(key_file, "Settings", "SynergyPath", NULL) ?
          g_key_file_get_value(key_file, "Settings", "SynergyPath", NULL) :
@@ -111,10 +121,12 @@ void save_config(qs_state_t *state) {
     if(g_strcmp0(state->right, _("Right"))) {
         g_key_file_set_value(key_file, "Share", "Right", state->right);
     }
+    g_key_file_set_boolean(key_file, "Require", "Tunnel", state->req_tunnel);
 
     g_key_file_set_value(key_file, "Use", "Hostname", state->hostname);
     
     g_key_file_set_value(key_file, "Use", "ClientName", state->client_name);
+    g_key_file_set_boolean(key_file, "Use", "SOCKS", state->use_socks);
     
     g_key_file_set_value(key_file, "Settings", "SynergyPath",
         state->synergy_path);
diff --git a/src/ui.c b/src/ui.c
index 56c21d2..86a3c22 100644
--- a/src/ui.c
+++ b/src/ui.c
@@ -54,15 +54,28 @@ GtkWidget *screen_entry_new(char **textp, const char *position) {
 
 GtkWidget *make_server_tab(qs_state_t *state) {
     GtkWidget *table;
+    GtkWidget *vbox1;
+    GtkWidget *checkbox;
     GtkWidget *image;
     GtkWidget *above_entry;
     GtkWidget *below_entry;
     GtkWidget *left_entry;
     GtkWidget *right_entry;
     
+    vbox1 = gtk_vbox_new(FALSE, 18);
+    gtk_container_set_border_width(GTK_CONTAINER(vbox1), 12);
+
     /* build the table that will hold the server layout widgets */
     table = gtk_table_new(3, 3, TRUE);
-    gtk_container_set_border_width(GTK_CONTAINER(table), 12);
+    gtk_box_pack_start(GTK_BOX(vbox1), table, FALSE, FALSE, 0);
+
+    /* Checkbox to require local/tunneled connections only */
+    checkbox = gtk_check_button_new_with_label(_("Tunneled Only"));
+    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(checkbox), state->req_tunnel);
+    gtk_box_pack_start(GTK_BOX(vbox1), checkbox, FALSE, FALSE, 0);
+
+    g_signal_connect(G_OBJECT(checkbox), "toggled",
+        G_CALLBACK(checkbox_changed_cb), (gpointer) &state->req_tunnel);
     
     /* text entries for server configuration */
     above_entry = screen_entry_new(&state->above, _("Above"));
@@ -79,14 +92,15 @@ GtkWidget *make_server_tab(qs_state_t *state) {
     /* image to be displayed in the center of the main window */
     image = gtk_image_new_from_stock(GTK_STOCK_HOME, GTK_ICON_SIZE_DIALOG);
     gtk_table_attach_defaults(GTK_TABLE(table), image, 1, 2, 1, 2);
-    
-    return table;
+
+    return vbox1;
 }
 
 GtkWidget *make_client_tab(qs_state_t *state) {
     GtkWidget *vbox, *vbox1;
     GtkWidget *label;
     GtkWidget *entry;
+    GtkWidget *checkbox;
     
     /* client's vbox */
     vbox1 = gtk_vbox_new(FALSE, 18);
@@ -108,6 +122,13 @@ GtkWidget *make_client_tab(qs_state_t *state) {
     /* update state information when text changes */
     g_signal_connect(G_OBJECT(entry), "changed",
         G_CALLBACK(entry_changed_cb), (gpointer) &state->hostname);
+
+    checkbox = gtk_check_button_new_with_label(_("SOCKS"));
+    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(checkbox), state->use_socks);
+    gtk_box_pack_start(GTK_BOX(vbox), checkbox, FALSE, FALSE, 0);
+
+    g_signal_connect(G_OBJECT(checkbox), "toggled",
+        G_CALLBACK(checkbox_changed_cb), (gpointer) &state->use_socks);
     
     /* screen name */
     vbox = gtk_vbox_new(FALSE, 6);
@@ -125,7 +146,7 @@ GtkWidget *make_client_tab(qs_state_t *state) {
     /* update state information when text changes */
     g_signal_connect(G_OBJECT(entry), "changed",
         G_CALLBACK(entry_changed_cb), (gpointer) &state->client_name);
-    
+
     return vbox1;
 }
 
diff --git a/src/ui.h b/src/ui.h
index bf36b88..ecf05ba 100644
--- a/src/ui.h
+++ b/src/ui.h
@@ -32,7 +32,10 @@ typedef struct qs_state {
     gchar *synergy_path;
     gchar *client_name;
     int running;
+    int use_socks;
+    int req_tunnel;
     pid_t pid;
+    pid_t tunnel_pid;
 } qs_state_t;
 
 GdkPixbuf *make_logo(void);
